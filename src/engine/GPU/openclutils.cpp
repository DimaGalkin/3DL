#include "openclutils.hpp"

#include <iostream>

ThreeDL::OpenCLUtils::OpenCLUtils() {
    // Look for platforms that may contain devices (GPUs)
    cl::Platform::get(&platforms_);
    if (platforms_.empty()) {
        throw std::runtime_error("No OpenCL platforms found");
    }

    int plat_num { 0 };
    int dev_num { 0 };

    for (const auto& platform : platforms_) {
        platform.getDevices(CL_DEVICE_TYPE_ALL, &devices_);
        std::cout << "[" << plat_num << "] Platform: " << platform.getInfo<CL_PLATFORM_NAME>() << std::endl;
        for (const auto& device : devices_) {
            std::cout << "  - [" << dev_num << "] Device: " << device.getInfo<CL_DEVICE_NAME>() << std::endl;
            ++dev_num;
        }

        ++plat_num;
        dev_num = 0;
        std::cout << std::endl;
    }

    std::cout << std::endl;

    std::cout << "Enter Platform Number: ";
    std::cin >> plat_num;
    std::cout << "Enter Device Number: ";
    std::cin >> dev_num;

    std::cout << std::endl;


    // Select platform that contains required GPU
    platform_ = platforms_[plat_num];
    std::cout << "Using platform: " << platform_.getInfo<CL_PLATFORM_NAME>() << std::endl;

    // Get all devices held by a platform
    platform_.getDevices(CL_DEVICE_TYPE_ALL, &devices_);
    if (devices_.empty()) {
        throw std::runtime_error("No OpenCL devices found");
    }

    // Select GPU which will be used to render scene
    device_ = devices_[dev_num];
    std::cout << "Using device: " << device_.getInfo<CL_DEVICE_NAME>() << std::endl;

    // get mem size in GB
    cl_ulong mem_size;
    device_.getInfo(CL_DEVICE_GLOBAL_MEM_SIZE, &mem_size);
    std::cout << "Global memory size: " << mem_size / (1024 * 1024 * 1024) << " GB" << std::endl;

    context_ = cl::Context({device_});

    // Create queue to which all instructions will be submitted
    queue_ = cl::CommandQueue(context_, device_);
}

std::string ThreeDL::OpenCLUtils::readKernel() {
    /*
       Include file that contains the 'kernel_include_source' variable. This file
       is generated by the iact.py file. This variable contains all of the GPU
       source code.
    */
    #include "iact.h"
    return kernel_include_source;
}

cl::Program ThreeDL::OpenCLUtils::buildProgram() const {
    // Create an executable code from GPU source code in file
    cl::Program program (context_, { readKernel() });

    // compile the OpenCL program
    if (program.build(devices_) != CL_SUCCESS) {
        throw std::runtime_error(program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(device_));
    }

    return program;
}

bool ThreeDL::OpenCLUtils::checkSVMCompatibility() const {
    return device_.getInfo<CL_DEVICE_SVM_CAPABILITIES>() & CL_DEVICE_SVM_COARSE_GRAIN_BUFFER;
}